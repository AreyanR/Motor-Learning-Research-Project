<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2024.2.4">
  <Settings>
    <Param val="3" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="ptb" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="Thank you for your patience." valType="str" updates="None" name="End Message"/>
    <Param val="{'participant': 'f&quot;{randint(0, 999999):06.0f}&quot;', 'session': '001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="False" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="False" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="False" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[800,800]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="float" valType="str" updates="None" name="clockFormat"/>
    <Param val="{'thisRow.t': 'priority.CRITICAL', 'expName': 'priority.LOW'}" valType="dict" updates="None" name="colPriority"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="warning" valType="code" updates="None" name="consoleLoggingLevel"/>
    <Param val="default" valType="str" updates="None" name="ecSampleRate"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="game" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="" valType="code" updates="None" name="frameRate"/>
    <Param val="Attempting to measure frame rate of screen, please wait..." valType="str" updates="None" name="frameRateMsg"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="info" valType="code" updates="None" name="logging level"/>
    <Param val="True" valType="bool" updates="None" name="measureFrameRate"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="neon.local" valType="str" updates="None" name="plCompanionAddress"/>
    <Param val="8080" valType="num" updates="None" name="plCompanionPort"/>
    <Param val="True" valType="bool" updates="None" name="plCompanionRecordingEnabled"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="0" valType="code" updates="None" name="runMode"/>
    <Param val="False" valType="bool" updates="None" name="rush"/>
    <Param val="time" valType="str" updates="None" name="sortColumns"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <RoutineSettingsComponent name="trial" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="trial" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
    </Routine>
    <Routine name="MainGame">
      <RoutineSettingsComponent name="MainGame" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="MainGame" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <ImageComponent name="background1" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="Assets/7.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="background1" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(2, 1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <ImageComponent name="dino_image" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="Assets/dino.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="dino_image" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.2, 0.2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <PolygonComponent name="floor1" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="-1.0000, -1.0000, -1.0000" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="-1.0000, -1.0000, -1.0000" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="floor1" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(-.5,-.5)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="rectangle" valType="str" updates="None" name="shape"/>
        <Param val="(.5,0.3)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="floor2" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="-1.0000, -1.0000, -1.0000" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="-1.0000, -1.0000, -1.0000" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="floor2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,-.5)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="rectangle" valType="str" updates="None" name="shape"/>
        <Param val="(.5,0.3)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <ImageComponent name="meatbone_image" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="Assets/meat_bone.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="meatbone_image" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.5, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <CodeComponent name="DinoMovement" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="from psychopy.hardware import keyboard&amp;#10;&amp;#10;# Initialize the Keyboard&amp;#10;kb = keyboard.Keyboard()&amp;#10;&amp;#10;# Dino movement variables&amp;#10;dino_pos = [-0.5, -0.3]  # Starting position [x, y]&amp;#10;dino_speed = 0  # Initial vertical speed&amp;#10;gravity = -0.00006  # Downward acceleration&amp;#10;jump_speed = 0.005  # Jumping speed&amp;#10;move_speed = 0.01  # Horizontal movement speed&amp;#10;ground_offset = 0.03  # Offset to avoid sinking into the ground visually&amp;#10;min_x = -0.6  # Left boundary&amp;#10;max_x = 5.3&amp;#10;respawn_position = [-0.5, -0.3]  # Starting position for Dino&amp;#10;&amp;#10;# Get the floor vertices from the Floor Controller&amp;#10;floor1_vertices = floor1.vertices  # Assuming 'floor' is a Polygon or Rect stimulus&amp;#10;&amp;#10;# Calculate the floor's top and fall threshold&amp;#10;floor_top = max(v[1] for v in floor1_vertices)  # Highest point of the floor&amp;#10;fall_threshold = min(v[1] for v in floor1_vertices) - 1  # Slightly below the lowest floor point&amp;#10;&amp;#10;&amp;#10;# Function to check if Dino is on the floor&amp;#10;def is_on_floor(dino_pos):&amp;#10;    &quot;&quot;&quot;Check if Dino's bottom is within the bounds of floor1 or floor2.&quot;&quot;&quot;&amp;#10;    dino_bottom = dino_pos[1] - (dino_image.size[1] / 2)  # Dino's bottom Y-position&amp;#10;&amp;#10;    # Floor1 bounds&amp;#10;    x_min1 = min(v[0] for v in floor1_vertices)&amp;#10;    x_max1 = max(v[0] for v in floor1_vertices)&amp;#10;    &amp;#10;    # Floor2 bounds&amp;#10;    x_min2 = min(v[0] for v in floor2_vertices)&amp;#10;    x_max2 = max(v[0] for v in floor2_vertices)&amp;#10;&amp;#10;    # Check floor1 or floor2&amp;#10;    on_floor1 = x_min1 &lt;= dino_pos[0] &lt;= x_max1 and dino_bottom &lt;= floor1_top&amp;#10;    on_floor2 = x_min2 &lt;= dino_pos[0] &lt;= x_max2 and dino_bottom &lt;= floor2_top&amp;#10;&amp;#10;    return on_floor1 or on_floor2&amp;#10;    &amp;#10;    &amp;#10;    &amp;#10;# Animation-related variables&amp;#10;frame_paths = [&amp;#10;    &quot;Assets/dino_frames/f1.png&quot;, &quot;Assets/dino_frames/f2.png&quot;, &amp;#10;    &quot;Assets/dino_frames/f3.png&quot;, &quot;Assets/dino_frames/f4.png&quot;, &amp;#10;    &quot;Assets/dino_frames/f5.png&quot;, &quot;Assets/dino_frames/f6.png&quot;, &amp;#10;    &quot;Assets/dino_frames/f7.png&quot;, &quot;Assets/dino_frames/f8.png&quot;, &amp;#10;    &quot;Assets/dino_frames/f9.png&quot;, &quot;Assets/dino_frames/f10.png&quot;, &amp;#10;    &quot;Assets/dino_frames/f11.png&quot;, &quot;Assets/dino_frames/f12.png&quot;&amp;#10;]&amp;#10;&amp;#10;&amp;#10;&amp;#10;frame_index = 0  # Start with the first frame&amp;#10;frame_index_update_counter = 0  # Counter to manage animation speed&amp;#10;total_frames = len(frame_paths)  # Total number of frames in the animation&amp;#10;&amp;#10;# Initialize the Dino's first frame&amp;#10;dino_image.image = frame_paths[frame_index]&amp;#10;&amp;#10;  &amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="keys_pressed = kb.getKeys(['left', 'right', 'up'], waitRelease=False, clear=False)&amp;#10;&amp;#10;# Initialize key state flags&amp;#10;left_pressed = False&amp;#10;right_pressed = False&amp;#10;up_pressed = False&amp;#10;&amp;#10;# Update key state flags based on keys currently pressed&amp;#10;for key in keys_pressed:&amp;#10;    if key.name == 'left':&amp;#10;        left_pressed = True&amp;#10;    if key.name == 'right':&amp;#10;        right_pressed = True&amp;#10;    if key.name == 'up':&amp;#10;        up_pressed = True&amp;#10;&amp;#10;# Apply gravity to Dino's vertical speed&amp;#10;dino_speed += gravity&amp;#10;&amp;#10;# Check if Dino is on the floor&amp;#10;if is_on_floor(dino_pos) and dino_speed &lt;= 0:  # Falling or stationary&amp;#10;    dino_pos[1] = floor1_top + (dino_image.size[1] / 2) - ground_offset  # Align Dino with the floor&amp;#10;    dino_speed = 0  # Reset vertical speed&amp;#10;&amp;#10;# Respawn if Dino falls below the floor threshold&amp;#10;if dino_pos[1] &lt; fall_threshold:&amp;#10;    print(&quot;Dino fell below threshold, respawning...&quot;)&amp;#10;    dino_pos = respawn_position[:]  # Reset Dino to starting position&amp;#10;    dino_speed = 0  # Reset vertical speed&amp;#10;&amp;#10;# Jumping logic: Allow jump whenever the 'up' key is pressed&amp;#10;if up_pressed:  # Check if the up key is pressed&amp;#10;    dino_speed = jump_speed  # Apply upward movement&amp;#10;&amp;#10;# Update Dino's vertical position&amp;#10;dino_pos[1] += dino_speed&amp;#10;&amp;#10;# Continuous horizontal movement&amp;#10;if left_pressed and dino_pos[0] &gt; min_x:&amp;#10;    dino_pos[0] -= move_speed  # Move Dino to the left&amp;#10;    dino_image.size = [-1 * abs(dino_image.size[0]), dino_image.size[1]]&amp;#10;&amp;#10;if right_pressed and dino_pos[0] &lt; max_x:&amp;#10;    dino_pos[0] += move_speed  # Move Dino to the right&amp;#10;    dino_image.size = [abs(dino_image.size[0]), dino_image.size[1]]  # Reset Dino to face right&amp;#10;&amp;#10;# Update Dino's position&amp;#10;dino_image.pos = [0, dino_pos[1]]  # Center Dino horizontally, only update vertical&amp;#10;&amp;#10;&amp;#10;keys_pressed = kb.getKeys(['o'], waitRelease=False, clear=False)&amp;#10;if 'o' in [key.name for key in keys_pressed]:&amp;#10;    print(f&quot;Dino Position: X = {dino_pos[0]:.3f}, Y = {dino_pos[1]:.3f}&quot;)&amp;#10;    &amp;#10;    &amp;#10;    &amp;#10;&amp;#10;# Update the Dino's animation&amp;#10;if (frame_index_update_counter % 4) == 0:  # Adjust 4 to control animation speed&amp;#10;    dino_image.image = frame_paths[frame_index]  # Update the current frame&amp;#10;&amp;#10;    # Advance to the next frame&amp;#10;    frame_index += 1&amp;#10;    if frame_index &gt;= total_frames:&amp;#10;        frame_index = 0  # Loop back to the first frame&amp;#10;&amp;#10;# Increment the animation frame counter&amp;#10;frame_index_update_counter += 1&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = psychoJS.eventManager.getKeys();&amp;#10;if (_pj.in_es6(&quot;right&quot;, keys)) {&amp;#10;    trex.pos += [5, 0];&amp;#10;}&amp;#10;if (_pj.in_es6(&quot;left&quot;, keys)) {&amp;#10;    trex.pos -= [5, 0];&amp;#10;}&amp;#10;if ((_pj.in_es6(&quot;up&quot;, keys) &amp;&amp; (trex.pos[1] === (- 150)))) {&amp;#10;    trex.pos += [0, 200];&amp;#10;}&amp;#10;if ((trex.pos[1] &gt; (- 150))) {&amp;#10;    trex.pos -= [0, 10];&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="DinoMovement" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="worldController" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="from psychopy.visual import Rect, ImageStim&amp;#10;&amp;#10;# Function to calculate vertices of a Rect stimulus&amp;#10;def calculate_rect_vertices(rect):&amp;#10;    &quot;&quot;&quot;Calculate the vertices of a Rect stimulus.&quot;&quot;&quot;&amp;#10;    half_width = rect.width / 2&amp;#10;    half_height = rect.height / 2&amp;#10;    center_x, center_y = rect.pos&amp;#10;    vertices = [&amp;#10;        [center_x - half_width, center_y - half_height],  # Bottom-left&amp;#10;        [center_x + half_width, center_y - half_height],  # Bottom-right&amp;#10;        [center_x + half_width, center_y + half_height],  # Top-right&amp;#10;        [center_x - half_width, center_y + half_height],  # Top-left&amp;#10;    ]&amp;#10;    return vertices&amp;#10;&amp;#10;# Camera variables&amp;#10;camera_offset_x = 0  # Tracks the camera offset to follow Dino&amp;#10;&amp;#10;# Background properties&amp;#10;background_width = 2.0  # Width of a single background image&amp;#10;background_height = 1.0&amp;#10;background_image = 'Assets/7.png'  # Path to your custom background image&amp;#10;&amp;#10;# Create two background images for seamless scrolling&amp;#10;background1 = ImageStim(win, image=background_image, size=[background_width, background_height], pos=[0, 0])&amp;#10;background2 = ImageStim(win, image=background_image, size=[background_width, background_height], pos=[background_width, 0])&amp;#10;&amp;#10;# Floor1 properties&amp;#10;floor1_height = 0.3&amp;#10;floor1_width = 0.5&amp;#10;floor1_pos = [-0.5, -0.5]&amp;#10;&amp;#10;floor1 = Rect(&amp;#10;    win=win,&amp;#10;    width=floor1_width,&amp;#10;    height=floor1_height,&amp;#10;    pos=floor1_pos,&amp;#10;    fillColor=&quot;black&quot;,&amp;#10;    lineColor=None&amp;#10;)&amp;#10;floor1_vertices = calculate_rect_vertices(floor1)&amp;#10;&amp;#10;# Floor2 properties - Place it further into the map&amp;#10;floor2_x_static = 5.0  # Fixed X position where floor2 appears&amp;#10;floor2_height = 0.3&amp;#10;floor2_width = 0.5&amp;#10;&amp;#10;floor2 = Rect(&amp;#10;    win=win,&amp;#10;    width=floor2_width,&amp;#10;    height=floor2_height,&amp;#10;    pos=[floor2_x_static, -0.5],&amp;#10;    fillColor=&quot;black&quot;,&amp;#10;    lineColor=None&amp;#10;)&amp;#10;floor2_vertices = calculate_rect_vertices(floor2)&amp;#10;&amp;#10;&amp;#10;# Floor thresholds&amp;#10;floor1_top = max(v[1] for v in floor1_vertices)&amp;#10;floor2_top = max(v[1] for v in floor2_vertices)&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="# Get Dino's position from your Dino movement code&amp;#10;# Assume dino_pos[0] tracks Dino's X position (horizontal movement)&amp;#10;&amp;#10;# Update the camera offset based on Dino's X position&amp;#10;camera_offset_x = dino_pos[0]  # The camera offset follows Dino's position&amp;#10;&amp;#10;# Move backgrounds relative to Dino's position (seamless wrap-around)&amp;#10;background1.pos = [-(camera_offset_x % background_width), 0]&amp;#10;background2.pos = [background1.pos[0] + background_width, 0]&amp;#10;&amp;#10;# Update floor positions relative to Dino's position&amp;#10;floor1.pos = [floor1_pos[0] - camera_offset_x, floor1.pos[1]]  # Floor1 moves with Dino&amp;#10;floor2.pos = [floor2_x_static - camera_offset_x, floor2.pos[1]]  # Floor2 moves with Dino&amp;#10;&amp;#10;# Draw the backgrounds and floors&amp;#10;background1.draw()&amp;#10;background2.draw()&amp;#10;floor1.draw()&amp;#10;floor2.draw()&amp;#10;&amp;#10;&quot;&quot;&quot;&amp;#10;# Debugging: Check positions if needed&amp;#10;if 'p' in kb.getKeys(['p'], waitRelease=False):&amp;#10;    print(f&quot;Background1 Position: {background1.pos}, Background2 Position: {background2.pos}&quot;)&amp;#10;    print(f&quot;Floor1 Position: {floor1.pos}, Floor2 Position: {floor2.pos}&quot;)&amp;#10;    print(f&quot;Dino Position: {dino_pos}&quot;)&amp;#10;&amp;#10;&quot;&quot;&quot;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="worldController" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="GoalController" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# Meatbone goal size&amp;#10;meatbone_size = [0.1, 0.1]  # Example size (width, height)&amp;#10;meatbone_image.size = meatbone_size&amp;#10;offset = 0.01  # Adjust to align the meatbone properly with floor2&amp;#10;&amp;#10;meatbone_collided = False  # Track whether the meatbone has been stomped" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="# Update meatbone position to match floor2's top&amp;#10;meatbone_x = floor2.pos[0]  # Update X position based on floor2&amp;#10;meatbone_y = floor2_top + (meatbone_size[1] / 2) - offset  # Keep the meatbone on top of floor2&amp;#10;&amp;#10;meatbone_pos = [meatbone_x, meatbone_y]&amp;#10;meatbone_image.pos = meatbone_pos&amp;#10;&amp;#10;# Check for collision&amp;#10;if not meatbone_collided and -0.05 &lt;= meatbone_x &lt;= 0.05 and -0.280 &lt;= dino_pos[1] &lt;= -0.200:&amp;#10;    print(&quot;Dino stomped the meatbone!&quot;)&amp;#10;    meatbone_image.opacity = 0  # Make the meatbone disappear&amp;#10;    meatbone_collided = True  # Set collision flag to prevent further updates&amp;#10;&amp;#10;# Check if the 'p' key is pressed to print meatbone position&amp;#10;keys_pressed = kb.getKeys(['p'], waitRelease=False)&amp;#10;if 'p' in [key.name for key in keys_pressed]:&amp;#10;    print(f&quot;Meatbone Position: X = {meatbone_pos[0]:.3f}, Y = {meatbone_pos[1]:.3f}&quot;)" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="GoalController" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="Load">
      <RoutineSettingsComponent name="Load" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="Load" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="Loading" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="Loading" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="3.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Loading..." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="MainGame"/>
  </Flow>
</PsychoPy2experiment>
